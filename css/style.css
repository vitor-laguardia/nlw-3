/*Cascata significa que o último termo escrito predominará. Porém se o style for aplicado diretamente como atributo na tag, ele predominará. Além disso sempre o mais específico predomina.*/
/*Sempre me refiro a funções como function();*/

* { /*seletor global*/
    margin: 0;
    padding: 0;
}
body {
    height: 100vh; /*fracionamos 100 pedacinhos. Ocupe tudo*/
    color: white;
}

:root { /*elemento raíz (html) Vantagem: controlar tamanho das fontes apenas modificando um parâmetro*/
    font-size:62.5%; /*100% --- 16px*/
}

body, input, button, textarea {
    font: 400 1.8rem/1 'Nunito', sans-serif;
}

/*Seção explicando rm e em*/
/*Se usamos em, significa que o browser irá buscar o elemento paie fará o cálculo baseado nele. Se usamos rem, significa root element, logo ele irá fazer o cálculo baseado na tag html(tamanho da fonte do html)*/

#page-landing {
    background: linear-gradient(329.54deg, #29b6d1 0%, #00c7c7 100%); 
    min-height: 100vh;
    text-align: center; 
    display: flex; /*Deixar os elementos flexiveis. Para centralizarmos verticalmente o conteúdo, poderíamos usar align-itens:center;*/
}

#container {
    margin: auto;
    width: 90%; /*Utilizamos essa propriedade para aumentar a margin horizontal. Antes não havia tamanho definido e ele utilizava 100% do espaço horizontal da tela*/
}

.location, h1, .visit p {
    height: 16vh;
}

.visit a {
    width: 8rem;
    height: 8rem;
    background: #ffd666;
    border: none;
    border-radius: 3rem; /*Curvatura, arredondamento*/
    display: flex;
    align-items: center;
    justify-content: center;
    margin: 0 auto; /*Como o elemento anterior ao a(.visit) nao possui display flex, o margin auto funcionará apenas na horizontal*/
}

/*Animações*/

@keyframes up { /*Nome da animação: up*/
    from{
        opacity: 0;
        transform: translatey(16px); /*abaixo do eixo x temos pixels positivos, e acima temos negativos. Começa de baixo e vai pra cima*/
    }

    to {
        opacity: 1;
        transform: translatey(0px);

    }
}

.animate-up{
    animation-name: up;
    animation-duration: 300ms;
    animation-fill-mode: backwards; /*Acabando a transição from para to, ele irá permanecer em to*/ 
}

#logo {
    animation-delay: 50ms;
}

.location {
    animation-delay: 100ms;
}

main h1 {
    animation-delay: 150ms;
}

.visit p {
    animation-delay: 200ms;
}

.visit a {
    animation-delay: 250ms;
}

